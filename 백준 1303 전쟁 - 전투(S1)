import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main{
    static int N, M, ni, nj;
    static char[][] arr;

    static boolean[][] visit;
    static int[] di = {0, 1, 0, -1};
    static int[] dj = {1, 0, -1, 0};
    static int sum_B, sum_W;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        arr = new char[M][N];
        visit = new boolean[M][N];

        for(int i = 0; i < M; i++){
            String str = br.readLine();
            for(int j = 0; j < N; j++){
                arr[i][j] = str.charAt(j);
            }
        }

        int resultW = 0;
        int resultB = 0;

        for(int i = 0; i < M; i++){
            for(int j = 0; j < N; j++){
                if(!visit[i][j] && arr[i][j] == 'W'){
                    sum_W = 1;
                    dfs_w(i, j);
                    resultW += (sum_W * sum_W);
                }
                if(!visit[i][j] && arr[i][j] == 'B'){
                    sum_B = 1;
                    dfs_b(i, j);
                    resultB += (sum_B * sum_B);
                }
            }
        }

        System.out.println(resultW + " " + resultB);
    }

    static void dfs_w(int i, int j){
        visit[i][j] = true;

        for(int d = 0; d < 4; d++){
            ni = di[d] + i;
            nj = dj[d] + j;

            if(check() && !visit[ni][nj] && arr[ni][nj] == 'W'){
                sum_W++;
                dfs_w(ni, nj);
            }
        }
    }

    static void dfs_b(int i, int j){
        visit[i][j] = true;

        for(int d = 0; d < 4; d++){
            ni = di[d] + i;
            nj = dj[d] + j;

            if(check() && !visit[ni][nj] && arr[ni][nj] == 'B'){
                sum_B++;
                dfs_b(ni, nj);
            }
        }
    }

    static boolean check() {
        return (ni >= 0 && nj >= 0 && ni < M && nj < N);
    }
}
