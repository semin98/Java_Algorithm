// bfs로 풀었슴

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    static int[][] arr;
    static int cnt;
    static int M, N, K;
    static int[] mi = {0, 1, 0, -1};
    static int[] mj = {1, 0, -1, 0};
    static boolean[][] visit;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();

        for(int t = 0; t < T; t++){
            M = sc.nextInt();
            N = sc.nextInt();
            K = sc.nextInt();
            cnt = 0;

            arr = new int[M][N];
            visit = new boolean[M][N];

            for(int k = 0; k < K; k++) {
                int i = sc.nextInt();
                int j = sc.nextInt();
                arr[i][j] = 1;
            }

            for(int i = 0; i < M; i++){
                for(int j = 0; j < N; j++){
                    if(arr[i][j] == 1 && !visit[i][j]){
                        bfs(i, j);
                        cnt ++;
                    }
                }
            }
            System.out.println(cnt);
        }

    }

    static void bfs(int si, int sj){
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {si, sj});

        while(!queue.isEmpty()){
            si = queue.peek()[0];
            sj = queue.peek()[1];
            visit[si][sj] = true;
            queue.poll();

            for(int d = 0; d < 4; d++){
                int ni = si + mi[d];
                int nj = sj + mj[d];
                if(0 <= ni && ni < M && 0 <= nj && nj < N){
                    if(!visit[ni][nj] && arr[ni][nj] == 1){
                        queue.add(new int[] {ni, nj});
                        visit[ni][nj] = true;
                    }
                }
            }
        }
    }

}
